{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        -464
      ],
      "id": "1fc1e2c7-ea9a-4d09-b40a-511333ed6960",
      "name": "When chat message received",
      "webhookId": "2c091acb-0e62-47e2-8c30-c6eb4998f481"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\nYou are a helpful assistant. Your job is to translate natural language questions into SQL queries that can be executed on a Oracle database.\n\nYou will receive the user's question as plain text in the `\"chatInput\"` field of the incoming JSON. Do not expect structured formatting â€” just natural language.\n\nHere is the userâ€™s question:  \n{{ $json[\"chatInput\"] }}\n\nYour task is to output only a valid SQL query using Oracle syntax. Do not include any explanation, comments, or text outside the query.\nOnly output the SQL query.\n\n---\n\nYou can also generate queries to fetch database metadata such as:\n\n* Table names:\n  `SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';`\n* Column names and types:\n  `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'your_table_name';`\n\n---\n\nWhen generating queries:\n\n* Always respect foreign key relationships and join related tables when needed to retrieve meaningful or complete information.\n* If a column is a foreign key, consider joining with the referenced table to get descriptive fields (e.g., product name instead of product\\_id).\n* Use appropriate table aliases for readability if joining multiple tables.\n* Ensure the query reflects the intent of the user's question, even if it requires joining across multiple related tables.\n* Ensure not to include ID fields instead specifically asked for.\n---\n\nBelow is information about the available tables in the database to help you write accurate queries:\n\n---\n\n**products**\n\n* product\\_id (PK)\n* product\\_name (text)\n* product\\_code (unique text)\n* category (text)\n* unit\\_price (numeric)\n  â†’ Holds product details.\n\n**batches**\n\n* batch\\_id (PK)\n* product\\_id (FK â†’ products.product\\_id)\n* lot\\_number (text)\n* production\\_date (date)\n* quantity\\_produced (int)\n  â†’ Represents production batches of each product.\n\n**inventory**\n\n* inventory\\_id (PK)\n* product\\_id (FK â†’ products.product\\_id)\n* warehouse (text)\n* quantity\\_available (int)\n  â†’ Shows current stock available in different warehouses.\n\n**customers**\n\n* customer\\_id (PK)\n* name (text)\n* city (text)\n* contact\\_email (text)\n  â†’ Stores customer details.\n\n**orders**\n\n* order\\_id (PK)\n* customer\\_id (FK â†’ customers.customer\\_id)\n* product\\_id (FK â†’ products.product\\_id)\n* order\\_date (date)\n* quantity\\_ordered (int)\n* status (text)\n  â†’ Tracks customer orders.\n\n---\n\nAlways output only a raw SQL query. Do not include any markdown formatting (like \\`\\`\\`sql), comments, or extra explanation â€” just the query.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        224,
        -464
      ],
      "id": "902b8748-198f-4cc1-887f-0cbcfb52011c",
      "name": "AI Agent",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        232,
        -240
      ],
      "id": "6d4d2b7b-c95b-4800-882a-270c72102f7b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "oGSnDSpQ0ezJMN1E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        360,
        -240
      ],
      "id": "e136ba1e-5b4c-4240-93cf-046aea4a899e",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  let query = item?.json?.output;\n\n  if (!query) return item;\n\n  // Step 1: Remove triple backticks + optional 'sql'\n  query = query.replace(/^```sql\\\\n|^```sql\\n|^```sql\\r\\n/, \"\")\n               .replace(/\\\\n```$|\\n```$|\\r\\n```$/, \"\");\n\n  // Step 2: Unescape \\n â†’ real newlines\n  query = query.replace(/\\\\n/g, \"\\n\").trim();\n\n  // Step 3: Convert table name to TitleCase and wrap in quotes\n  const upperQuery = query.toUpperCase();\n  if (upperQuery.startsWith(\"SELECT\") && query.trim().endsWith(\";\")) {\n    const fromIndex = upperQuery.indexOf(\"FROM\");\n    if (fromIndex !== -1) {\n      const tableNameStart = fromIndex + 5;\n      const tableNameEnd = query.indexOf(\" \", tableNameStart);\n      const tableName = query.slice(\n        tableNameStart,\n        tableNameEnd !== -1 ? tableNameEnd : query.length - 1\n      ).trim();\n\n      // const titleCaseTableName = `\"${tableName.charAt(0).toUpperCase() + tableName.slice(1).toLowerCase()}\"`;\n\n      //query = query.replace(tableName, titleCaseTableName);\n    }\n  }\n\n  // Step 4: Clean up spacing\n  item.json.output = query.replace(/\\s+/g, \" \").trim();\n  return item;\n});\n\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -464
      ],
      "id": "bdb391dc-0265-4a15-8561-2e1363894ba2",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a helpful assistant that transforms SQL query results into clear, professional summaries for end users. Given the following input:\nobjects\n{{ Columns = $json[\"rows\"].last().keys()}}\n{{ Values = $json[\"rows\"].map((item)=> item.values()); \n  \n}}\n\nGenerate a well-structured summary with the following components: 1. ðŸ“‹ **Summary Explanation** Provide a concise explanation of what the returned data represents. \n\n2. ðŸ§  **Analytics** Provide analytics on the datato find patterns.\n\n3. ðŸ“Š **Formatted Results Table** Display the raw SQL results in a clean and readable Markdown table, ensuring: \n* Proper column headers \n* Neat alignment \n* No truncation or overflow \n* Added Padding and Extra Spacing between columns !IMPORTANT \n* Add spacing after data\n* Convert column headers to Title Case Ensure the entire response is well-formatted, user-friendly, and suitable for presentation or reporting purposes. The output is intended for markdown  \n\n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1696,
        -464
      ],
      "id": "67c2c9bd-913d-47a7-ac2f-b2b0bc91462b",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1768,
        -240
      ],
      "id": "da46dfa7-9b3f-4f2c-818b-977b88c01240",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "oGSnDSpQ0ezJMN1E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n\n\n// Flatten each row to a readable format\n// const rows = temp.map((item, index) => {\n//   const row = item;\n//   const readable = Object.entries(row)\n//     .map(([key, value]) => `**${key}**: ${value}`)\n//     .join(', ');\n//   return `Row ${index + 1}: ${readable}`;\n// });\n\nreturn [\n  {\n    json: {\n      success: items[0].json.success,\n      rows: items[0].json.results\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        -464
      ],
      "id": "174d619c-8079-435e-9568-4f4a489d2c8d",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/db-direct?",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$json.output}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        -464
      ],
      "id": "61b84882-7d8c-4d2b-90a4-53f571cab190",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f40634d-dafb-4ac7-9af3-d15c45d21897",
              "leftValue": "={{ $json.rows.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1472,
        -464
      ],
      "id": "0dcd9e59-9edb-42f9-a2e9-212ae3cbec60",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7e1204dc-a1b6-4c29-acfa-c64fb2a5c01b",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1248,
        -464
      ],
      "id": "57c37f18-c2ec-4f4e-bf56-ad840cbadef2",
      "name": "If1"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ab2a647d-cd5d-4c2f-a75a-fa387aa04e6c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "90b808ffc3b7e9f6683045420eea737c695b5d4180e3671bdfecba258b0078d2"
  },
  "id": "VdEhXZSWb3M6wi7Q",
  "tags": []
}